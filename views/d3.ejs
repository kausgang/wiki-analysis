<!DOCTYPE html>
<meta charset="utf-8">
<style>

    .links line {
        stroke: #aaa;
    }

    .nodes circle {
        pointer-events: all;
        stroke: none;
        stroke-width: 40px;
    }




</style>

<svg width="500" height="700"></svg>




<!--<script src="https://d3js.org/d3.v4.min.js"></script>-->
<script>




    var svg = d3.select("svg"),
        width = +svg.attr("width"),
        height = +svg.attr("height");

    var r=5;

    var simulation = d3.forceSimulation()
        .force("link", d3.forceLink().id(function(d) { return d.section_number; }))
        .force("charge", d3.forceManyBody())
        // .force("charge", d3.forceManyBody().strength(1.5))
        // .force("x",d3.forceX(width/2).strength(0.5))
        // .force("y",d3.forceY(height/2).strength(0.5))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("collide",d3.forceCollide(r+10))
    ;

    d3.json("data.json", function(error, graph) {
        if (error) throw error;


        var color = d3.scaleOrdinal(d3.schemeCategory20);
        var url = graph.url;

        var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(graph.links)
            .enter().append("line");


        var node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("circle")
            .data(graph.nodes)
            .enter().append("circle")
            // .attr("r", r)
            .attr("r",function (d) {

                if(d.section_number == -1)
                    return 10;
                if(d.parent_section_number == -1)
                    return 7;
                else
                    return 5
            })
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));


        // CLICK & DOUBLE-CLICK function to open sections of wikipedia
        node.on('click',function(d){

            navigate_node(url,d.section_number)

        });
        node.on('dblclick',function(d){

                navigate_node(url,d.section_number)

        });

        //color property
        node.attr("fill",function (d) {

            return color(d.parent_section_number) ;
        })

        //show tooltip text on mouse hover
        node.append("title")
            .text(function(d) {

                //show the section header
                return d.section_header;

            });


        simulation
            .nodes(graph.nodes)
            .on("tick", ticked);

        simulation.force("link")
            .links(graph.links);

        function ticked() {
            link
                .attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

            node
                .attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; });
        }







    });

    function dragstarted(d) {
        if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        d.fx = d.x;
        d.fy = d.y;

        // console.log(d3.event.subject);
    }

    function dragged(d) {
        d.fx = d3.event.x;
        d.fy = d3.event.y;
    }

    function dragended(d) {
        if (!d3.event.active) simulation.alphaTarget(0);
        d.fx = null;
        d.fy = null;
    }


    function navigate_node(url,section_number) {

        // if (!d3.event.active) simulation.alphaTarget(0.3).restart();
        // console.log(url+'\n'+section_number);

        var parameter = {

            url:url,
            section_number:section_number
        }

        $.get('/get_section',parameter,function (data) {

             $('#level_0_center').html(data);

        })





    }

</script>